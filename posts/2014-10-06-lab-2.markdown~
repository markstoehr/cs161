---
title: Lab 2: Onward to Rational Strassen!
---

# Lab Submission Guidelines

Before we begin lab today I will discuss some details about the expected
project setup for submission.

## Using SVN

In order to submit the lab we will use `svn`.  This is an inferior and dated
version control system that is easier to support with the systems setup the
way they are.  In the future we will use git.  All of you should consider
getting [a github account](http://github.com/) since it is a way of indicating your
potential to employers while you are just starting out.

An example SVN interaction will look like

    cd 
    svn checkout student-cs161-aut-14   # get a copy of the repository -- run only once
    cd student-cs161-aut-14
    svn up                  # check for any updates -- in our case comments and grades
    mkdir lab1              # make the directory for the new lab
    svn add lab1            # start tracking lab1
    cd lab1                 # move into the directory to begin work
    emacs main.hs
    svn add main.hs         # add the saved work
    svn commit -m "began work on main.hs"     # push your work to the central server

## Project Layout

These instructions are based [on this page from Haskell.org](http://www.haskell.org/haskellwiki/How_to_write_a_Haskell_program). We aren't going to move to
that layout while your programs are simple but once we get passed IO
topics in lecture we will incorporate this structure into future labs.

For this project all I expect is:
1. `lab1.hs` -- the main Haskell source code
2. `README`  -- a text file written in [markdown](https://daringfireball.net/projects/markdown/basics) which contains your name, who (if anybody) you collaborated with (that info should also be in your source code for the specific function(s), and a brief explanation of what your code does/which problems in lab you completed.  The purpose of this is to make grading easier so that you get back more helpful comments.
3. `LICENSE` -- the license, you don't have to include this but you are welcome to particularly if you want to develop the code into a project this can be nice to have so that other people can use your code.  I generally use a [BSD license](http://opensource.org/licenses/BSD-2-Clause).

For grading the graders will add in a file
4. `GRADING` -- will have a comment summary (possibly we will put some comments directly in the code) as well as the grade.  The grade is 0,1,2,3.  0 indicates that the project was far from completed/the code does not compile/the project was not handed in on time. 1 indicates the project was close to completion. 2 indicates the project was completed satisfactorily.  3 indicates that there was an extra credit achieved in addition to a complete project.

# Strassen Matrix Multiplication Lab

In this lab we will use some of the ideas from class to implement a small
matrix library for matrices over rational fractions with rational coefficients.
We will be basing everything on the implementation of natural numbers from lecture 2.

1. Implement `MyInteger` a type that extends `NaturalNumber` to include negative integers. Extend the basic arithmetic operations `+`, `-`, `neg`